generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @default(uuid())
  telegramId       String           @unique
  userName         String
  systemPrompt     String
  defaultModelId   String
  defaultModel     AIModel       @relation(fields: [defaultModelId], references: [id])
  freeQuestions    Int
  premiumQuestions Int
  createdAt        DateTime      @default(now())
  chats            Chat[]
  Messages         Message[]
  subscription     Subscription?
  Shortcuts        Shortcut[]
}

model Chat {
  id        String    @id @default(uuid())
  title     String
  users     User[]
  messages  Message[]
  type      Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AIModel {
  id          String     @id @default(uuid())
  name        String
  systemName  String
  description String?
  premium     Boolean
  tags        String[]
  provider    String[]
  Message     Message[]
  User        User[]
  Shortcut    Shortcut[]
}

model Message {
  id        Int         @id @default(autoincrement())
  chat      Chat        @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User        @relation(fields: [senderId], references: [id])
  senderId  String
  role      MessageRole
  content   String
  model     AIModel?    @relation(fields: [modelId], references: [id])
  modelId   String?
  replyTo   Message?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replyToId Int?
  replies   Message[]   @relation("MessageReplies")
  createdAt DateTime    @default(now())
}

model Subscription {
  id                String             @id @unique @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  validUntil        DateTime
  status            SubscriptionStatus
  telegramPaymentId String
  providerPaymentId String

  @@index([userId])
}

model Shortcut {
  id          String  @id @unique @default(uuid())
  instruction String
  command     String
  modelId     String
  model       AIModel @relation(fields: [modelId], references: [id])
  userId      String
  User        User    @relation(fields: [userId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
}

enum MessageRole {
  user
  assistant
  system
}
