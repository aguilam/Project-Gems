from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.methods import UnpinChatMessage, PinChatMessage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    BufferedInputFile,
)
import aiohttp
from aiohttp import ClientError
import asyncio
import os
import base64
from io import BytesIO
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from dotenv import load_dotenv
from telegramify_markdown import markdownify

load_dotenv()
router = Router()

TOKEN = os.getenv("TOKEN", "")
API_URL = os.getenv("API_URL", "http://localhost:3000")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp = Dispatcher()

ROLES = [
    {
        "key": "search_explainer",
        "title": "–£–º–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ üîç",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 35% –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–º–µ—Å—Ç–æ Google, 23% –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
        "prompt": (
            "–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å:\n"
            "- –î–∞—ë—à—å –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
            "- –û–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
            "- –ü—Ä–∏–≤–æ–¥–∏—à—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏\n"
            "- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."
        ),
    },
    {
        "key": "editor",
        "title": "–†–µ–¥–∞–∫—Ç–æ—Ä ‚úçÔ∏è",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 23% –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "prompt": (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã.\n\n"
            "–¢—ã —É–º–µ–µ—à—å:\n"
            "- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é\n"
            "- –î–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ–Ω—è—Ç–Ω–µ–µ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–µ–µ\n"
            "- –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–∏—Å—å–º–∞–º–∏ (—Ä–∞–±–æ—á–∏–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏)\n"
            "- –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
            "- –°–æ–∫—Ä–∞—â–∞—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ç–µ–∫—Å—Ç—ã\n\n"
            "–í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ª—É—á—à–µ."
        ),
    },
    {
        "key": "cook_assistant",
        "title": "–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üç≥",
        "description": "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –∫—É—Ö–æ–Ω–Ω—ã—Ö –ª–∞–π—Ñ—Ö–∞–∫–æ–≤",
        "prompt": (
            "–¢—ã ‚Äî –¥–æ–º–∞—à–Ω–∏–π –∫—É–ª–∏–Ω–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏ –≤–∫—É—Å–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.\n\n"
            "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å:\n"
            "- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –¥–æ–º–∞\n"
            "- –ù–∞—Ö–æ–¥–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–∂–∏–Ω–∞\n"
            "- –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
            "- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–¥ –¥–∏–µ—Ç—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n"
            "–ù–∞—á–Ω–∏ —Å –≤–æ–ø—Ä–æ—Å–∞: —á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ?"
        ),
    },
    {
        "key": "summarizer",
        "title": "–°—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä üìã",
        "description": "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤",
        "prompt": (
            "–¢—ã ‚Äî –º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å.\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É:\n"
            "- –í—ã–¥–µ–ª—è–µ—à—å –≥–ª–∞–≤–Ω—ã–µ –º—ã—Å–ª–∏\n"
            "- –£–±–∏—Ä–∞–µ—à—å –ª–∏—à–Ω—é—é –≤–æ–¥—É\n"
            "- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—É–Ω–∫—Ç–∞–º\n"
            "- –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n\n"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —á—Ç–µ–Ω–∏–∏."
        ),
    },
    {
        "key": "planner",
        "title": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–µ–ª üìÖ",
        "description": "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
        "prompt": (
            "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–¥–∞—á.\n\n"
            "–ü–æ–º–æ–≥–∞–µ—à—å —Å:\n"
            "- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –¥–µ–ª\n"
            "- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–Ω—è/–Ω–µ–¥–µ–ª–∏\n"
            "- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º\n"
            "- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ–∫—É–ø–æ–∫ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –¥–µ–ª\n\n"
            "–í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ—à—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        ),
    },
    {
        "key": "support_partner",
        "title": "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ü§ù",
        "description": "–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        "prompt": (
            "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å.\n\n"
            "–¢—ã –º–æ–∂–µ—à—å:\n"
            "- –í—ã—Å–ª—É—à–∞—Ç—å –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è\n"
            "- –ü–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º—ã—Å–ª—è—Ö\n"
            "- –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
            "- –ü–æ–º–æ—á—å —Å –≤–µ–¥–µ–Ω–∏–µ–º –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
            "–í–∞–∂–Ω–æ: —Ç—ã –ù–ï –ø—Å–∏—Ö–æ–ª–æ–≥. –ü—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ–≤–µ—Ç—É–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
        ),
    },
    {
        "key": "custom",
        "title": "–°–≤–æ–π –ø—Ä–æ–º–ø—Ç ‚úèÔ∏è",
        "description": "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤—Ä—É—á–Ω—É—é",
        "prompt": None,
    },
]


@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    data = {
        "telegramId": message.from_user.id,
        "username": message.from_user.username or "Unknown",
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/user", json=data) as resp:
                await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –æ–±—â–∞—Ç—å—Å—è.")
    except aiohttp.ClientError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")


async def fetch_chats(telegram_id: int) -> dict:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/chats?telegramId={telegram_id}") as resp:
            resp.raise_for_status()
            return await resp.json()


async def delete_chat(chat_id: str):
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/chats/{chat_id}"
        async with session.delete(url) as resp:
            resp.raise_for_status()
            return await resp.json()


async def edit_chat(chat_id: str, new_title: str):
    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/chats/{chat_id}"
        payload = {"id": chat_id, "title": new_title}
        async with session.patch(url, json=payload) as resp:
            resp.raise_for_status()
            return await resp.json()


async def show_chats_menu(target, state: FSMContext, mode: str = None):
    data = await state.get_data()
    active_chat = data.get("active_chat")
    telegram_id = target.from_user.id

    try:
        chats = await fetch_chats(telegram_id)
    except Exception as e:
        await target.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {e}")
        return

    rows: list[list[InlineKeyboardButton]] = []
    for chat in chats:
        label = chat.get("title") or chat["id"][:8]

        if chat["id"] == active_chat:
            label += " ‚úÖ"
        if mode == "delete":
            label += " üóë"
        elif mode == "edit":
            label += " ‚úèÔ∏è"

        rows.append(
            [InlineKeyboardButton(text=label, callback_data=f"sel_{chat['id']}")]
        )

    if mode is None:
        rows.append(
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="mode:edit"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="mode:delete"),
            ]
        )
    else:
        rows.append(
            [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mode:cancel")]
        )

    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    text_map = {
        None: "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        "delete": "–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        "edit": "–†–µ–∂–∏–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
    }
    text = text_map[mode]

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb)
    else:
        await target.answer(text, reply_markup=kb)

    await state.update_data(mode=mode)


@dp.message(Command(commands=["chats"]))
async def cmd_chats(message: types.Message, state: FSMContext):
    await show_chats_menu(message, state, mode=None)


@dp.callback_query(lambda c: c.data and c.data.startswith("mode:"))
async def cb_mode(query: types.CallbackQuery, state: FSMContext):
    mode = query.data.split(":", 1)[1]
    if mode == "cancel":
        await state.update_data(mode="none")
        await show_chats_menu(query, state, mode=None)
    else:
        await show_chats_menu(query, state, mode=mode)
    await query.answer()


@dp.callback_query(lambda c: c.data and c.data.startswith("sel_"))
async def cb_selectchat(query: types.CallbackQuery, state: FSMContext):
    chat_id = query.data.split("_", 1)[1]
    data = await state.get_data()
    mode = data.get("mode")

    if mode == "delete":
        await delete_chat(chat_id)
        await query.answer("‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω")
        await show_chats_menu(query, state, mode="delete")

    elif mode == "edit":
        await state.update_data(edit_target=chat_id)
        await query.answer()
        await query.message.edit_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å"
        )

    else:
        await state.update_data(active_chat=chat_id)
        await query.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: {chat_id}")


async def fetch_models() -> list[dict]:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/models") as resp:
            resp.raise_for_status()
            return await resp.json()


async def fetch_user(telegram_id: int) -> dict:
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/user/{telegram_id}") as resp:
            resp.raise_for_status()
            return await resp.json()


async def patch_user_model(telegram_id: int, model_id: str) -> dict:
    payload = {"telegramId": telegram_id, "defaultModelId": model_id}
    async with aiohttp.ClientSession() as session:
        async with session.patch(f"{API_URL}/user", json=payload) as resp:
            resp.raise_for_status()
            return await resp.json()


def build_keyboard(
    models: list[dict], selected_id: str | None, user_premium: bool
) -> InlineKeyboardMarkup:
    buttons: list[InlineKeyboardButton] = []
    for m in models:
        label = m["name"]
        if m.get("premium", False) and not user_premium:
            label = f"üîí {label}"
            callback_data = "disabled"
        else:
            if str(m["id"]) == selected_id:
                label = f"‚úÖ {label}"
            callback_data = f"model_select:{m['id']}"
        buttons.append(InlineKeyboardButton(text=label, callback_data=callback_data))

    info_btn = InlineKeyboardButton(
        text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö", callback_data="models_info"
    )
    rows = [buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    rows.append([info_btn])
    return InlineKeyboardMarkup(inline_keyboard=rows)


@dp.message(Command(commands=["models"]))
async def on_models_command(message: types.Message):
    telegram_id = message.from_user.id
    models, user = await asyncio.gather(fetch_models(), fetch_user(telegram_id))

    current_model_id = str(user.get("defaultModelId", ""))

    kb = build_keyboard(
        models, selected_id=current_model_id, user_premium=user.get("premium", False)
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)


@dp.callback_query(lambda c: c.data and c.data.startswith("model_select:"))
async def on_model_selected(callback: CallbackQuery):
    telegram_id = callback.from_user.id
    selected_id = callback.data.split(":", 1)[1]

    await patch_user_model(telegram_id, selected_id)
    models, user = await asyncio.gather(fetch_models(), fetch_user(telegram_id))
    selected_model = next((m for m in models if m.get("id") == selected_id), None)
    model_title = selected_model["name"]
    kb = build_keyboard(
        models, selected_id=selected_id, user_premium=user.get("premium", False)
    )
    chat_id = callback.message.chat.id
    await callback.message.edit_reply_markup(reply_markup=kb)
    sent = await callback.bot.send_message(
        chat_id=chat_id,
        text=f"üìù{model_title}",
        parse_mode="Markdown"
    )
    try:
        await callback.bot.unpin_chat_message(chat_id=chat_id)  
    except Exception:
        print('bad')
    await callback.bot(PinChatMessage(chat_id=chat_id, message_id=sent.message_id))

    await callback.answer(text="‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=False)


@dp.callback_query(lambda c: c.data == "models_info")
async def on_models_info(callback: CallbackQuery):
    models = await fetch_models()
    info_lines = [
        f"\n*{m['name']}* ‚Äì {m.get('description', '_–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è_')}" for m in models
    ]
    info_text = "\n".join(info_lines)

    kb = callback.message.reply_markup

    new_text = f"‚ÑπÔ∏è *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:*\n\n{info_text}"
    await callback.message.edit_text(new_text, parse_mode="Markdown", reply_markup=kb)
    await callback.answer()


async def patch_user_info(dto: dict) -> dict:
    async with aiohttp.ClientSession() as session:
        async with session.patch(f"{API_URL}/user", json=dto) as resp:
            resp.raise_for_status()
            return await resp.json()


async def show_roles_menu(target, state: FSMContext):
    user = await fetch_user(target.from_user.id)
    current_prompt = user.get("systemPrompt", "")
    matched_key = next(
        (r["key"] for r in ROLES if r["prompt"] and r["prompt"] == current_prompt),
        "custom",
    )
    description = next(r["description"] for r in ROLES if r["key"] == matched_key)
    header = f"*–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:* {description}\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:*"

    rows = []
    for r in ROLES:
        selected = " ‚úÖ" if r["key"] == matched_key else ""
        rows.append(
            [
                InlineKeyboardButton(
                    text=f"{r['title']}{selected}", callback_data=f"role_sel:{r['key']}"
                )
            ]
        )
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(header, reply_markup=kb, parse_mode="Markdown")
    else:
        await target.answer(header, reply_markup=kb, parse_mode="Markdown")

    await state.update_data(mode=None)


@dp.message(Command(commands=["role"]))
async def cmd_role(message: types.Message, state: FSMContext):
    await show_roles_menu(message, state)


@dp.callback_query(lambda c: c.data and c.data.startswith("role_sel:"))
async def cb_role_select(query: types.CallbackQuery, state: FSMContext):
    key = query.data.split(":", 1)[1]
    role = next(r for r in ROLES if r["key"] == key)

    if key == "custom":
        await state.update_data(mode="role_custom")
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /role –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
    else:
        await patch_user_info(
            {"telegramId": query.from_user.id, "systemPrompt": role["prompt"]}
        )
        await query.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
        await show_roles_menu(query, state)


@dp.message(lambda m: m.text is not None and not m.text.startswith("/"))
async def message_router(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mode = data.get("mode")
    edit_target = data.get("edit_target")

    if mode == "edit" and edit_target:
        new_title = message.text.strip()
        await edit_chat(edit_target, new_title)
        await message.answer(f"‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_title}")
        await state.update_data(edit_target=None)
        await show_chats_menu(message, state, mode="edit")
        return

    if data.get("mode") == "role_custom":
        prompt = message.text.strip()
        await patch_user_info(
            {"telegramId": message.from_user.id, "systemPrompt": prompt}
        )
        await message.answer("‚úÖ –í–∞—à —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        await show_roles_menu(message, state)
        return
    chat_id = data.get("active_chat")
    payload = {
        "telegramId": message.from_user.id,
        "prompt": message.text,
    }
    if chat_id:
        payload["chatId"] = chat_id

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(f"{API_URL}/messages", json=payload) as resp:
                text = await resp.text()
                if resp.status >= 400:
                    try:
                        err = await resp.json()
                        await message.answer(err.get("message", text))
                    except:
                        await message.answer(text)
                    return

                result = await resp.json()
                raw = result.get("content", "")
                if result.get("type") == "image":

                    photo = BufferedInputFile(base64.b64decode(raw), filename="gen.png")
                    await message.answer_photo(photo)
                else:
                    if isinstance(raw, (tuple, list)) and raw:
                        raw = raw[0]
                    safe_md = markdownify(raw)
                    await message.answer(safe_md, parse_mode=ParseMode.MARKDOWN_V2)
        except ClientError as e:
            await message.answer(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message(F.photo)
async def on_photo(message: types.Message):
    photo: types.PhotoSize = message.photo[-1]

    bio = BytesIO()
    await bot.download(photo.file_id, destination=bio)
    bio.seek(0)
    file_bytes = bio.read()

    user_text = message.caption or "–ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ"

    b64 = base64.b64encode(file_bytes).decode("utf-8")

    payload = {
        "telegramId": message.from_user.id,
        "prompt": user_text,
        "image": b64,
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/messages", json=payload) as resp:
                text = await resp.text()

                if resp.status >= 400:
                    try:
                        err = await resp.json()
                        err_msg = err.get("message", text)
                    except Exception:
                        err_msg = text
                    await message.reply(f"–û—à–∏–±–∫–∞: {err_msg}")
                    return

                data = await resp.json()
                await message.reply(data.get("content", ""), parse_mode="MarkdownV2")
    except aiohttp.ClientError as e:
        await message.reply(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message((F.document & ~F.document.mime_type.contains("image/")) | F.audio | F.voice)
async def handler_doc(message: types.message):
    is_forwarded = bool(
        message.forward_from or message.forward_from_chat or message.forward_sender_name
    )
    doc = message.document or message.audio or message.voice
    data = aiohttp.FormData()
    caption = message.caption or "–ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç,  —á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ"
    data.add_field("prompt", caption, content_type="text/plain")
    data.add_field("telegramId", str(message.from_user.id), content_type="text/plain")
    data.add_field("isForwarded", str(is_forwarded), content_type="text/plain")
    if not doc:
        return
    bio = BytesIO()
    await bot.download(doc.file_id, destination=bio)
    bio.seek(0)
    filename = getattr(doc, "file_name", f"{doc.file_id}.ogg")
    content_type = getattr(doc, "mime_type", None) or (
        "audio/ogg" if message.voice else "application/octet-stream"
    )
    data.add_field(
        "file",
        value=bio,
        filename=filename,
        content_type=content_type,
    )

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/messages", data=data) as resp:
                text = await resp.text()

                if resp.status >= 400:
                    try:
                        err = await resp.json()
                        err_msg = err.get("message", text)
                    except Exception:
                        err_msg = text
                    await message.reply(f"–û—à–∏–±–∫–∞: {err_msg}")
                    return

                data = await resp.json()
                await message.reply(data.get("content", ""))
    except aiohttp.ClientError as e:
        await message.reply(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")


async def main():
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
